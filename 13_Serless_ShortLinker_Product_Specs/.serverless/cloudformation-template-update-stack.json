{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "CustomAuthorizerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-typescript-api-shortLink-customAuthorizer"
      }
    },
    "SignUnderscoreupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-typescript-api-shortLink-sign_up"
      }
    },
    "SignUnderscoreinLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-typescript-api-shortLink-sign_in"
      }
    },
    "VerifyUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-typescript-api-shortLink-verifyUser"
      }
    },
    "CreateShortLinkLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-typescript-api-shortLink-createShortLink"
      }
    },
    "ListAllLinksLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-typescript-api-shortLink-listAllLinks"
      }
    },
    "DeactivateLinksLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-typescript-api-shortLink-deactivateLinks"
      }
    },
    "MoveByShortLinkLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-typescript-api-shortLink-moveByShortLink"
      }
    },
    "CheckValidLinksLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-typescript-api-shortLink-checkValidLinks"
      }
    },
    "CallSQSLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-typescript-api-shortLink-callSQS"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "aws-typescript-api",
                  "shortLink",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-typescript-api-shortLink*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-typescript-api-shortLink*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Deny",
                  "Action": "logs:PutLogEvents",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-typescript-api-shortLink-swagger-ui:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-typescript-api-shortLink-swagger-json:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:*",
                    "sqs:*",
                    "ses:*",
                    "events:*"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:eu-central-1:*:table/user",
                    "arn:aws:dynamodb:eu-central-1:*:table/user/index/email-index",
                    "arn:aws:dynamodb:eu-central-1:*:table/link",
                    "arn:aws:dynamodb:eu-central-1:*:table/link/index/user_id-index",
                    "arn:aws:dynamodb:eu-central-1:*:table/link/index/shortLink-index-index",
                    "*"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "aws-typescript-api",
              "shortLink",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "CustomAuthorizerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-typescript-api/shortLink/1700401461767-2023-11-19T13:44:21.767Z/customAuthorizer.zip"
        },
        "Handler": "src/controllers/user/authorizer.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "aws-typescript-api-shortLink-customAuthorizer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SQS_LINK": {
              "Ref": "SESQueue"
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps --stack-trace-limit=1000",
            "AWS_DYNAMODB_TABLE_USER": "user",
            "AWS_DYNAMODB_TABLE_LINK": "link",
            "CLIENT_ID": "v3savcdvebbefhjqqqemhqbu0",
            "CLIENT_SECRET": "1hbmq81ve2amidbl4bmgnmmb0en86e9hsb4vkrvcuq1lffm7piep",
            "USER_POOL_ID": "eu-central-1_ZSrlBNsta",
            "SECRET_KEY": "1l23M4he054OInad8",
            "SES_EMAIL": "sultrus15@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CustomAuthorizerLogGroup"
      ]
    },
    "SignUnderscoreupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-typescript-api/shortLink/1700401461767-2023-11-19T13:44:21.767Z/sign_up.zip"
        },
        "Handler": "src/controllers/user/sign_up.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "aws-typescript-api-shortLink-sign_up",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SQS_LINK": {
              "Ref": "SESQueue"
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps --stack-trace-limit=1000",
            "AWS_DYNAMODB_TABLE_USER": "user",
            "AWS_DYNAMODB_TABLE_LINK": "link",
            "CLIENT_ID": "v3savcdvebbefhjqqqemhqbu0",
            "CLIENT_SECRET": "1hbmq81ve2amidbl4bmgnmmb0en86e9hsb4vkrvcuq1lffm7piep",
            "USER_POOL_ID": "eu-central-1_ZSrlBNsta",
            "SECRET_KEY": "1l23M4he054OInad8",
            "SES_EMAIL": "sultrus15@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SignUnderscoreupLogGroup"
      ]
    },
    "SignUnderscoreinLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-typescript-api/shortLink/1700401461767-2023-11-19T13:44:21.767Z/sign_in.zip"
        },
        "Handler": "src/controllers/user/sign_in.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "aws-typescript-api-shortLink-sign_in",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SQS_LINK": {
              "Ref": "SESQueue"
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps --stack-trace-limit=1000",
            "AWS_DYNAMODB_TABLE_USER": "user",
            "AWS_DYNAMODB_TABLE_LINK": "link",
            "CLIENT_ID": "v3savcdvebbefhjqqqemhqbu0",
            "CLIENT_SECRET": "1hbmq81ve2amidbl4bmgnmmb0en86e9hsb4vkrvcuq1lffm7piep",
            "USER_POOL_ID": "eu-central-1_ZSrlBNsta",
            "SECRET_KEY": "1l23M4he054OInad8",
            "SES_EMAIL": "sultrus15@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SignUnderscoreinLogGroup"
      ]
    },
    "VerifyUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-typescript-api/shortLink/1700401461767-2023-11-19T13:44:21.767Z/verifyUser.zip"
        },
        "Handler": "src/controllers/user/verifyUser.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "aws-typescript-api-shortLink-verifyUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SQS_LINK": {
              "Ref": "SESQueue"
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps --stack-trace-limit=1000",
            "AWS_DYNAMODB_TABLE_USER": "user",
            "AWS_DYNAMODB_TABLE_LINK": "link",
            "CLIENT_ID": "v3savcdvebbefhjqqqemhqbu0",
            "CLIENT_SECRET": "1hbmq81ve2amidbl4bmgnmmb0en86e9hsb4vkrvcuq1lffm7piep",
            "USER_POOL_ID": "eu-central-1_ZSrlBNsta",
            "SECRET_KEY": "1l23M4he054OInad8",
            "SES_EMAIL": "sultrus15@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "VerifyUserLogGroup"
      ]
    },
    "CreateShortLinkLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-typescript-api/shortLink/1700401461767-2023-11-19T13:44:21.767Z/createShortLink.zip"
        },
        "Handler": "src/controllers/links/createShortLink.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "aws-typescript-api-shortLink-createShortLink",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SQS_LINK": {
              "Ref": "SESQueue"
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps --stack-trace-limit=1000",
            "AWS_DYNAMODB_TABLE_USER": "user",
            "AWS_DYNAMODB_TABLE_LINK": "link",
            "CLIENT_ID": "v3savcdvebbefhjqqqemhqbu0",
            "CLIENT_SECRET": "1hbmq81ve2amidbl4bmgnmmb0en86e9hsb4vkrvcuq1lffm7piep",
            "USER_POOL_ID": "eu-central-1_ZSrlBNsta",
            "SECRET_KEY": "1l23M4he054OInad8",
            "SES_EMAIL": "sultrus15@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateShortLinkLogGroup"
      ]
    },
    "ListAllLinksLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-typescript-api/shortLink/1700401461767-2023-11-19T13:44:21.767Z/listAllLinks.zip"
        },
        "Handler": "src/controllers/links/listAllLinks.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "aws-typescript-api-shortLink-listAllLinks",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SQS_LINK": {
              "Ref": "SESQueue"
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps --stack-trace-limit=1000",
            "AWS_DYNAMODB_TABLE_USER": "user",
            "AWS_DYNAMODB_TABLE_LINK": "link",
            "CLIENT_ID": "v3savcdvebbefhjqqqemhqbu0",
            "CLIENT_SECRET": "1hbmq81ve2amidbl4bmgnmmb0en86e9hsb4vkrvcuq1lffm7piep",
            "USER_POOL_ID": "eu-central-1_ZSrlBNsta",
            "SECRET_KEY": "1l23M4he054OInad8",
            "SES_EMAIL": "sultrus15@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ListAllLinksLogGroup"
      ]
    },
    "DeactivateLinksLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-typescript-api/shortLink/1700401461767-2023-11-19T13:44:21.767Z/deactivateLinks.zip"
        },
        "Handler": "src/controllers/links/deactivateLink.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "aws-typescript-api-shortLink-deactivateLinks",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SQS_LINK": {
              "Ref": "SESQueue"
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps --stack-trace-limit=1000",
            "AWS_DYNAMODB_TABLE_USER": "user",
            "AWS_DYNAMODB_TABLE_LINK": "link",
            "CLIENT_ID": "v3savcdvebbefhjqqqemhqbu0",
            "CLIENT_SECRET": "1hbmq81ve2amidbl4bmgnmmb0en86e9hsb4vkrvcuq1lffm7piep",
            "USER_POOL_ID": "eu-central-1_ZSrlBNsta",
            "SECRET_KEY": "1l23M4he054OInad8",
            "SES_EMAIL": "sultrus15@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeactivateLinksLogGroup"
      ]
    },
    "MoveByShortLinkLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-typescript-api/shortLink/1700401461767-2023-11-19T13:44:21.767Z/moveByShortLink.zip"
        },
        "Handler": "src/controllers/links/moveByShortLink.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "aws-typescript-api-shortLink-moveByShortLink",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SQS_LINK": {
              "Ref": "SESQueue"
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps --stack-trace-limit=1000",
            "AWS_DYNAMODB_TABLE_USER": "user",
            "AWS_DYNAMODB_TABLE_LINK": "link",
            "CLIENT_ID": "v3savcdvebbefhjqqqemhqbu0",
            "CLIENT_SECRET": "1hbmq81ve2amidbl4bmgnmmb0en86e9hsb4vkrvcuq1lffm7piep",
            "USER_POOL_ID": "eu-central-1_ZSrlBNsta",
            "SECRET_KEY": "1l23M4he054OInad8",
            "SES_EMAIL": "sultrus15@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "MoveByShortLinkLogGroup"
      ]
    },
    "CheckValidLinksLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-typescript-api/shortLink/1700401461767-2023-11-19T13:44:21.767Z/checkValidLinks.zip"
        },
        "Handler": "src/controllers/links/checkValidLinks.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "aws-typescript-api-shortLink-checkValidLinks",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SQS_LINK": {
              "Ref": "SESQueue"
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps --stack-trace-limit=1000",
            "AWS_DYNAMODB_TABLE_USER": "user",
            "AWS_DYNAMODB_TABLE_LINK": "link",
            "CLIENT_ID": "v3savcdvebbefhjqqqemhqbu0",
            "CLIENT_SECRET": "1hbmq81ve2amidbl4bmgnmmb0en86e9hsb4vkrvcuq1lffm7piep",
            "USER_POOL_ID": "eu-central-1_ZSrlBNsta",
            "SECRET_KEY": "1l23M4he054OInad8",
            "SES_EMAIL": "sultrus15@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CheckValidLinksLogGroup"
      ]
    },
    "CallSQSLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-typescript-api/shortLink/1700401461767-2023-11-19T13:44:21.767Z/callSQS.zip"
        },
        "Handler": "src/controllers/links/callSQS.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "aws-typescript-api-shortLink-callSQS",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SQS_LINK": {
              "Ref": "SESQueue"
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps --stack-trace-limit=1000",
            "AWS_DYNAMODB_TABLE_USER": "user",
            "AWS_DYNAMODB_TABLE_LINK": "link",
            "CLIENT_ID": "v3savcdvebbefhjqqqemhqbu0",
            "CLIENT_SECRET": "1hbmq81ve2amidbl4bmgnmmb0en86e9hsb4vkrvcuq1lffm7piep",
            "USER_POOL_ID": "eu-central-1_ZSrlBNsta",
            "SECRET_KEY": "1l23M4he054OInad8",
            "SES_EMAIL": "sultrus15@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CallSQSLogGroup"
      ]
    },
    "SwaggerUILambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-typescript-api/shortLink/1700401461767-2023-11-19T13:44:21.767Z/swaggerUI.zip"
        },
        "Handler": "swagger/swagger-html.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "aws-typescript-api-shortLink-swagger-ui",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SQS_LINK": {
              "Ref": "SESQueue"
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps --stack-trace-limit=1000",
            "AWS_DYNAMODB_TABLE_USER": "user",
            "AWS_DYNAMODB_TABLE_LINK": "link",
            "CLIENT_ID": "v3savcdvebbefhjqqqemhqbu0",
            "CLIENT_SECRET": "1hbmq81ve2amidbl4bmgnmmb0en86e9hsb4vkrvcuq1lffm7piep",
            "USER_POOL_ID": "eu-central-1_ZSrlBNsta",
            "SECRET_KEY": "1l23M4he054OInad8",
            "SES_EMAIL": "sultrus15@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      }
    },
    "SwaggerJSONLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-typescript-api/shortLink/1700401461767-2023-11-19T13:44:21.767Z/swaggerJSON.zip"
        },
        "Handler": "swagger/swagger-json.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "aws-typescript-api-shortLink-swagger-json",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SQS_LINK": {
              "Ref": "SESQueue"
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps --stack-trace-limit=1000",
            "AWS_DYNAMODB_TABLE_USER": "user",
            "AWS_DYNAMODB_TABLE_LINK": "link",
            "CLIENT_ID": "v3savcdvebbefhjqqqemhqbu0",
            "CLIENT_SECRET": "1hbmq81ve2amidbl4bmgnmmb0en86e9hsb4vkrvcuq1lffm7piep",
            "USER_POOL_ID": "eu-central-1_ZSrlBNsta",
            "SECRET_KEY": "1l23M4he054OInad8",
            "SES_EMAIL": "sultrus15@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      }
    },
    "SwaggerUILambdaVersionirybImU1fGFY6g6oSnwbDQIaGS8fW7M2NILj0VP994": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SwaggerUILambdaFunction"
        },
        "CodeSha256": "tsFbxWMbI3WJYq+8D/KANXVuiiLg+rVOdmS7jydDFUY="
      }
    },
    "SwaggerJSONLambdaVersionl6ygLAL3RtRXKKSrR9gqjUKZFm2x1iS9lSORgFDYi4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SwaggerJSONLambdaFunction"
        },
        "CodeSha256": "DkQkeKezuHntHE3kTwexyZaB4/g/KJIW5LKRNYzdfeo="
      }
    },
    "ListAllLinksLambdaVersiondaPdLGcxUqJZXe3knlJqZrQ1ziQWpas2q9UinC7QaQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListAllLinksLambdaFunction"
        },
        "CodeSha256": "tCLBezFyuRplib8HUICSO3rGXxzKKoRk4wfEUPL4L0o="
      }
    },
    "CustomAuthorizerLambdaVersion4ffi5y4W3NKs18sIAKP5hG5pcFVJKLlYtYA4821HLbQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CustomAuthorizerLambdaFunction"
        },
        "CodeSha256": "gQQmxiShuJc41MerTTTqYiQ0S6p3wFxxspak3AfuCsE="
      }
    },
    "VerifyUserLambdaVersionDX15HSIlholY3YTqkk4wyh6pMAhggfBu8b0AuWU6M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "VerifyUserLambdaFunction"
        },
        "CodeSha256": "zITkBilAUGXz+Jclh3RvapRwptK/Zc+fVpcOZiY2ENE="
      }
    },
    "SignUnderscoreupLambdaVersionAXvupUYrsSFhNZpmag6QPtZS2mjgMuQNsylCi814g4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SignUnderscoreupLambdaFunction"
        },
        "CodeSha256": "BEAugSP+MRyjWh03jUr47kE5vZQvip7cTyyIQqQi5eQ="
      }
    },
    "CheckValidLinksLambdaVersionhhyFMziMtbjEWohHIPq5Xzzr2dzz3MIFrcmzFUW0k": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CheckValidLinksLambdaFunction"
        },
        "CodeSha256": "iVZa+HkIEIhIQ7dcG2zku+dUt+8WnhKapTmcxmcSW0s="
      }
    },
    "CallSQSLambdaVersionoIkCiOZ009cntAJFmPLveZuhQwqXnn0KWh6xEzV9L3E": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CallSQSLambdaFunction"
        },
        "CodeSha256": "o7voHS+AeC3EncjniYy3TB2hbd8UbznrsBxE/DhpiVY="
      }
    },
    "DeactivateLinksLambdaVersionnhbMcqdEKnQhzbQOoCBVvSvQzJ7m3xzU9cmhO4boJo0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeactivateLinksLambdaFunction"
        },
        "CodeSha256": "fpKRMYXvF0bFSPSVwEW5mXpl3glw4m3O5Mo9yJF66Ao="
      }
    },
    "SignUnderscoreinLambdaVersionlPcEtIT2l1fdYVbc9XX6ElEzup4lsLnZl6KX4rc6qE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SignUnderscoreinLambdaFunction"
        },
        "CodeSha256": "NNvhCw9D4Wy52QunLmqHdvWjQx1yHCj8DIr1UyYJjqI="
      }
    },
    "MoveByShortLinkLambdaVersionHJn4fjNnAbNJKr9x0BbXdmt7kXq1kmcI90aoXfwxw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MoveByShortLinkLambdaFunction"
        },
        "CodeSha256": "4THG9F51n6lynAOfIUvqiybLC+D2qBXuvjZ7F+/v6gc="
      }
    },
    "CreateShortLinkLambdaVersionITwKHSrgx1AwxOipI8dwz5d5IRfV46dMYnk4NfBQtw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateShortLinkLambdaFunction"
        },
        "CodeSha256": "hHQ9NqoZzu/6QHsKPOOmgT8Qlx+DVZyqBkelua99upg="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "aws-typescript-api-shortLink",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": "",
        "MinimumCompressionSize": 1024
      }
    },
    "ApiGatewayResourceUser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserSignup": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "PathPart": "sign_up",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserSignin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "PathPart": "sign_in",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceVerify": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "verify",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceVerifyProxyVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceVerify"
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceLink": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "link",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceLinkCreateshortlink": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceLink"
        },
        "PathPart": "createShortLink",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceLinkListalllinks": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceLink"
        },
        "PathPart": "listAllLinks",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceLinkDeactivatelink": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceLink"
        },
        "PathPart": "deactivateLink",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceProxyVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodLinkCreateshortlinkOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceLinkCreateshortlink"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodLinkListalllinksOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceLinkListalllinks"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodLinkDeactivatelinkOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceLinkDeactivatelink"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUserSignupPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserSignup"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SignUnderscoreupLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SignUnderscoreupLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUserSigninPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserSignin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SignUnderscoreinLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SignUnderscoreinLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodVerifyProxyVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceVerifyProxyVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "VerifyUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "VerifyUserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodLinkCreateshortlinkPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceLinkCreateshortlink"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "CustomAuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateShortLinkLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CustomAuthorizerApiGatewayAuthorizer"
      ]
    },
    "ApiGatewayMethodLinkListalllinksGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceLinkListalllinks"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "CustomAuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ListAllLinksLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CustomAuthorizerApiGatewayAuthorizer"
      ]
    },
    "ApiGatewayMethodLinkDeactivatelinkPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceLinkDeactivatelink"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "CustomAuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeactivateLinksLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CustomAuthorizerApiGatewayAuthorizer"
      ]
    },
    "ApiGatewayMethodProxyVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceProxyVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "MoveByShortLinkLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "MoveByShortLinkLambdaPermissionApiGateway"
      ]
    },
    "CustomAuthorizerApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "IdentitySource": "method.request.header.Authorization",
        "Name": "customAuthorizer",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "CustomAuthorizerLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN"
      }
    },
    "ApiGatewayDeployment1700401451407": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "shortLink"
      },
      "DependsOn": [
        "ApiGatewayMethodLinkCreateshortlinkOptions",
        "ApiGatewayMethodLinkListalllinksOptions",
        "ApiGatewayMethodLinkDeactivatelinkOptions",
        "ApiGatewayMethodUserSignupPost",
        "ApiGatewayMethodUserSigninPost",
        "ApiGatewayMethodVerifyProxyVarGet",
        "ApiGatewayMethodLinkCreateshortlinkPost",
        "ApiGatewayMethodLinkListalllinksGet",
        "ApiGatewayMethodLinkDeactivatelinkPost",
        "ApiGatewayMethodProxyVarGet"
      ]
    },
    "SignUnderscoreupLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SignUnderscoreupLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SignUnderscoreinLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SignUnderscoreinLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "VerifyUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "VerifyUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateShortLinkLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateShortLinkLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CustomAuthorizerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CustomAuthorizerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ListAllLinksLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListAllLinksLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeactivateLinksLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeactivateLinksLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "MoveByShortLinkLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "MoveByShortLinkLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AwstypescriptapishortLinkcheckValidLinksrule1EventBridgeRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": "aws-typescript-api-shortLink-checkValidLinks-rule-1",
        "ScheduleExpression": "rate(1 hour)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "CheckValidLinksLambdaFunction",
                "Arn"
              ]
            },
            "Id": "aws-typescript-api-shortLink-checkValidLinks-rule-1-target"
          }
        ]
      }
    },
    "CheckValidLinksEventBridgeLambdaPermission1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "CheckValidLinksLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            ":",
            [
              "arn",
              {
                "Ref": "AWS::Partition"
              },
              "events",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::AccountId"
              },
              {
                "Fn::Join": [
                  "/",
                  [
                    "rule",
                    "aws-typescript-api-shortLink-checkValidLinks-rule-1"
                  ]
                ]
              }
            ]
          ]
        }
      }
    },
    "AwstypescriptapishortLinkcallSQSrule1EventBridgeRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": "aws-typescript-api-shortLink-callSQS-rule-1",
        "ScheduleExpression": "rate(1 minute)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "CallSQSLambdaFunction",
                "Arn"
              ]
            },
            "Id": "aws-typescript-api-shortLink-callSQS-rule-1-target"
          }
        ]
      }
    },
    "CallSQSEventBridgeLambdaPermission1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "CallSQSLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            ":",
            [
              "arn",
              {
                "Ref": "AWS::Partition"
              },
              "events",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::AccountId"
              },
              {
                "Fn::Join": [
                  "/",
                  [
                    "rule",
                    "aws-typescript-api-shortLink-callSQS-rule-1"
                  ]
                ]
              }
            ]
          ]
        }
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "shortLink-aws-typescript-api",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "SwaggerUILambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SwaggerUILambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSwaggerUI": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SwaggerUILambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetSwagger": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /swagger",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSwaggerUI"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSwaggerUI"
    },
    "SwaggerJSONLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SwaggerJSONLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSwaggerJSON": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SwaggerJSONLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetSwaggerjson": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /swagger.json",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSwaggerJSON"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSwaggerJSON"
    },
    "UsersTable": {
      "Type": "AWS::DynamoDB::GlobalTable",
      "Properties": {
        "TableName": "user",
        "AttributeDefinitions": [
          {
            "AttributeName": "user_id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "email",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "user_id",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "email",
            "KeyType": "RANGE"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "email-index",
            "KeySchema": [
              {
                "AttributeName": "email",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          },
          {
            "IndexName": "userId-index",
            "KeySchema": [
              {
                "AttributeName": "user_id",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        },
        "Replicas": [
          {
            "Region": "eu-central-1"
          },
          {
            "Region": "eu-west-2"
          }
        ]
      }
    },
    "LinksTable": {
      "Type": "AWS::DynamoDB::GlobalTable",
      "Properties": {
        "TableName": "link",
        "AttributeDefinitions": [
          {
            "AttributeName": "link_id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "user_id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "short_link",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "link_id",
            "KeyType": "HASH"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "shortLink-index",
            "KeySchema": [
              {
                "AttributeName": "short_link",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          },
          {
            "IndexName": "user_id-index",
            "KeySchema": [
              {
                "AttributeName": "user_id",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        },
        "Replicas": [
          {
            "Region": "eu-central-1"
          },
          {
            "Region": "eu-west-2"
          }
        ]
      }
    },
    "SESQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "SESQueue"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-aws-typescript-api-shortLink-ServerlessDeploymentBucketName"
      }
    },
    "SwaggerUILambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SwaggerUILambdaVersionirybImU1fGFY6g6oSnwbDQIaGS8fW7M2NILj0VP994"
      },
      "Export": {
        "Name": "sls-aws-typescript-api-shortLink-SwaggerUILambdaFunctionQualifiedArn"
      }
    },
    "SwaggerJSONLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SwaggerJSONLambdaVersionl6ygLAL3RtRXKKSrR9gqjUKZFm2x1iS9lSORgFDYi4"
      },
      "Export": {
        "Name": "sls-aws-typescript-api-shortLink-SwaggerJSONLambdaFunctionQualifiedArn"
      }
    },
    "ListAllLinksLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListAllLinksLambdaVersiondaPdLGcxUqJZXe3knlJqZrQ1ziQWpas2q9UinC7QaQ"
      },
      "Export": {
        "Name": "sls-aws-typescript-api-shortLink-ListAllLinksLambdaFunctionQualifiedArn"
      }
    },
    "CustomAuthorizerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CustomAuthorizerLambdaVersion4ffi5y4W3NKs18sIAKP5hG5pcFVJKLlYtYA4821HLbQ"
      },
      "Export": {
        "Name": "sls-aws-typescript-api-shortLink-CustomAuthorizerLambdaFunctionQualifiedArn"
      }
    },
    "VerifyUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "VerifyUserLambdaVersionDX15HSIlholY3YTqkk4wyh6pMAhggfBu8b0AuWU6M"
      },
      "Export": {
        "Name": "sls-aws-typescript-api-shortLink-VerifyUserLambdaFunctionQualifiedArn"
      }
    },
    "SignUnderscoreupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SignUnderscoreupLambdaVersionAXvupUYrsSFhNZpmag6QPtZS2mjgMuQNsylCi814g4"
      },
      "Export": {
        "Name": "sls-aws-typescript-api-shortLink-SignUnderscoreupLambdaFunctionQualifiedArn"
      }
    },
    "CheckValidLinksLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CheckValidLinksLambdaVersionhhyFMziMtbjEWohHIPq5Xzzr2dzz3MIFrcmzFUW0k"
      },
      "Export": {
        "Name": "sls-aws-typescript-api-shortLink-CheckValidLinksLambdaFunctionQualifiedArn"
      }
    },
    "CallSQSLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CallSQSLambdaVersionoIkCiOZ009cntAJFmPLveZuhQwqXnn0KWh6xEzV9L3E"
      },
      "Export": {
        "Name": "sls-aws-typescript-api-shortLink-CallSQSLambdaFunctionQualifiedArn"
      }
    },
    "DeactivateLinksLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeactivateLinksLambdaVersionnhbMcqdEKnQhzbQOoCBVvSvQzJ7m3xzU9cmhO4boJo0"
      },
      "Export": {
        "Name": "sls-aws-typescript-api-shortLink-DeactivateLinksLambdaFunctionQualifiedArn"
      }
    },
    "SignUnderscoreinLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SignUnderscoreinLambdaVersionlPcEtIT2l1fdYVbc9XX6ElEzup4lsLnZl6KX4rc6qE"
      },
      "Export": {
        "Name": "sls-aws-typescript-api-shortLink-SignUnderscoreinLambdaFunctionQualifiedArn"
      }
    },
    "MoveByShortLinkLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "MoveByShortLinkLambdaVersionHJn4fjNnAbNJKr9x0BbXdmt7kXq1kmcI90aoXfwxw"
      },
      "Export": {
        "Name": "sls-aws-typescript-api-shortLink-MoveByShortLinkLambdaFunctionQualifiedArn"
      }
    },
    "CreateShortLinkLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateShortLinkLambdaVersionITwKHSrgx1AwxOipI8dwz5d5IRfV46dMYnk4NfBQtw"
      },
      "Export": {
        "Name": "sls-aws-typescript-api-shortLink-CreateShortLinkLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/shortLink"
          ]
        ]
      },
      "Export": {
        "Name": "sls-aws-typescript-api-shortLink-ServiceEndpoint"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-aws-typescript-api-shortLink-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-aws-typescript-api-shortLink-HttpApiUrl"
      }
    }
  }
}